service: serverless-line-chatbot

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}

functions:
  #### jobfinding.js
  findjobs:
    handler: handlers/jobfinding.findjobsbot
    events:
      - http:
          path: findjobs
          method: post
  findjobsweb:
    handler: handlers/jobfinding.findjobsweb
    events:
      - http:
          path: job-search
          method: get
          cors: true
          authorizer: aws_iam
  #### regularapplication.js
  listmyapplications:
    handler: handlers/regularapplication.listMyApplications
    events:
      - http:
          path: my-applications
          method: get
          cors: true
          authorizer: aws_iam
  listmyjobapplications:
    handler: handlers/regularapplication.listMyJobApplications
    events:
      - http:
          path: my-jobs/applications/{idj}
          method: get
          cors: true
          authorizer: aws_iam
  getapplication:
    handler: handlers/regularapplication.getApplication
    events:
      - http:
          path: applications/{ida}
          method: get
          cors: true
          authorizer: aws_iam
  acceptapplication:
    handler: handlers/regularapplication.acceptApplication
    events:
      - http:
          path: accept-application/{ida}
          method: patch
          cors: true
          authorizer: aws_iam
  rejectapplication:
    handler: handlers/regularapplication.rejectApplication
    events:
      - http:
          path: reject-application/{ida}
          method: patch
          cors: true
          authorizer: aws_iam
  #### regularjob.js
  createregularjob:
    handler: handlers/regularjob.createRegularJob
    events:
      - http:
          path: jobs/create
          method: post
          cors: true
          authorizer: aws_iam
  getregularjob:
    handler: handlers/regularjob.getRegularJob
    events:
      - http:
          path: jobs/{idj}
          method: get
          cors: true
          authorizer: aws_iam
  listmyjob:
    handler: handlers/regularjob.listMyJob
    events:
      - http:
          path: my-jobs
          method: get
          cors: true
          authorizer: aws_iam
  updateregularjobdetail:
    handler: handlers/regularjob.updateRegularJobDetail
    events:
      - http:
          path: update-job-detail/{idj}
          method: patch
          cors: true
          authorizer: aws_iam
  updateregularjobstatus:
    handler: handlers/regularjob.updateRegularJobStatus
    events:
      - http:
          path: update-job-status/{idj}
          method: patch
          cors: true
          authorizer: aws_iam
  #### regularplan.js
  createregularjobposter:
    handler: handlers/regularplan.createRegularJobposter
    events:
      - http:
          path: create-jobposter/{idu}
          method: patch
          cors: true
          authorizer: aws_iam
  revokejobposter:
    handler: handlers/regularplan.revokeJobposter
    events:
      - http:
          path: revoke-jobposter/{idu}
          method: patch
          cors: true
          authorizer: aws_iam
  #### regularuser.js
  createregularuser:
    handler: handlers/regularuser.createRegularUser
    events:
      - http:
          path: regular-users
          method: post
          cors: true
          authorizer: aws_iam
  getmyprofile:
    handler: handlers/regularuser.getMyProfile
    events:
      - http:
          path: regular-users/me
          method: get
          cors: true
          authorizer: aws_iam
  getuserprofile:
    handler: handlers/regularuser.getUserProfile
    events:
      - http:
          path: regular-users/{idu}
          method: get
          cors: true
          authorizer: aws_iam
  updatemyprofile:
    handler: handlers/regularuser.updateMyProfile
    events:
      - http:
          path: update-my-profile
          method: patch
          cors: true
          authorizer: aws_iam
  deactivateregularuser:
    handler: handlers/regularuser.deactivateRegularUser
    events:
      - http:
          path: deactivate-regular-user/{idu}
          method: patch
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}