service: serverless-ck-village

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}

functions:
  #### village.js
  createvillage:
    handler: handlers/village.createVillage
    events:
      - http:
          path: villages
          method: post
          cors: true
          authorizer: aws_iam
  getmyvillageprofile:
    handler: handlers/village.getMyVillageProfile
    events:
      - http:
          path: villages/my-village
          method: get
          cors: true
          authorizer: aws_iam
  getvillageprofile:
    handler: handlers/village.getVillageProfile
    events:
      - http:
          path: villages/profile/{idv}
          method: get
          cors: true
          authorizer: aws_iam
  updatevillageprofile:
    handler: handlers/village.updateVillageProfile
    events:
      - http:
          path: villages/profile/{idv}
          method: patch
          cors: true
          authorizer: aws_iam
  listvillageactivity:
    handler: handlers/village.listVillageActivity
    events:
      - http:
          path: villages/activities/{idv}
          method: get
          cors: true
          authorizer: aws_iam
  #### villagejob.js
  createvillagejob:
    handler: handlers/villagejob.createVillageJob
    events:
      - http:
          path: village-jobs
          method: post
          cors: true
          authorizer: aws_iam
  listvillagejob:
    handler: handlers/villagejob.listVillageJob
    events:
      - http:
          path: village-jobs/{idv}
          method: get
          cors: true
          authorizer: aws_iam
  getvillagejob:
    handler: handlers/villagejob.getVillageJob
    events:
      - http:
          path: village-jobs/{idv}/{idj}
          method: get
          cors: true
          authorizer: aws_iam
  updatevillagejobdetail:
    handler: handlers/villagejob.updateVillageJobDetail
    events:
      - http:
          path: village-job-detail/{idv}/{idj}
          method: patch
          cors: true
          authorizer: aws_iam
  updatevillagejobstatus:
    handler: handlers/villagejob.updateVillageJobStatus
    events:
      - http:
          path: village-job-status/{idv}/{idj}
          method: patch
          cors: true
          authorizer: aws_iam
  completevillagejob:
    handler: handlers/villagejob.completeVillageJob
    events:
      - http:
          path: village-job-complete/{idv}/{idj}
          method: post
          cors: true
          authorizer: aws_iam
  #### villageplan.js
  renewvillagesubscription:
    handler: handlers/villageplan.renewVillageSubscription
    events:
      - http:
          path: village-plan/renew/{idvp}
          method: patch
          cors: true
          authorizer: aws_iam
  updatevillagesubscription:
    handler: handlers/villageplan.updateVillageSubscription
    events:
      - http:
          path: village-plan/update/{idvp}
          method: patch
          cors: true
          authorizer: aws_iam
  stopvillagesubscription:
    handler: handlers/villageplan.stopVillageSubscription
    events:
      - http:
          path: village-plan/stop/{idvp}
          method: patch
          cors: true
          authorizer: aws_iam
  reactivatevillagesubscription:
    handler: handlers/villageplan.reactivateVillageSubscription
    events:
      - http:
          path: village-plan/reactivate/{idvp}
          method: patch
          cors: true
          authorizer: aws_iam
  #### villageuser.js (admin part)
  listvillageadmin:
    handler: handlers/villageuser.listVillageAdmin
    events:
      - http:
          path: village-admins/{idv}
          method: get
          cors: true
          authorizer: aws_iam
  getvillageadmin:
    handler: handlers/villageuser.getVillageAdmin
    events:
      - http:
          path: village-admins/{idv}/{idu}
          method: get
          cors: true
          authorizer: aws_iam
  updatevillageadmin:
    handler: handlers/villageuser.updateVillageAdmin
    events:
      - http:
          path: village-admins/update/{idv}/{idu}
          method: patch
          cors: true
          authorizer: aws_iam
  createvillageadmin:
    handler: handlers/villageuser.createVillageAdmin
    events:
      - http:
          path: village-admins/create/{idu}
          method: patch
          cors: true
          authorizer: aws_iam
  revokevillageadmin:
    handler: handlers/villageuser.revokeVillageAdmin
    events:
      - http:
          path: village-admins/revoke/{idu}
          method: patch
          cors: true
          authorizer: aws_iam
  #### villageuser.js (user part)
  createvillageuser:
    handler: handlers/villageuser.createVillageUser
    events:
      - http:
          path: village-users
          method: post
          cors: true
          authorizer: aws_iam
  listvillageuser:
    handler: handlers/villageuser.listVillageUser
    events:
      - http:
          path: village-users/{idv}
          method: get
          cors: true
          authorizer: aws_iam
  getvillageuser:
    handler: handlers/villageuser.getVillageUser
    events:
      - http:
          path: village-users/{idv}/{idu}
          method: get
          cors: true
          authorizer: aws_iam
  updatevillageuser:
    handler: handlers/villageuser.updateVillageUser
    events:
      - http:
          path: village-users/{idv}/{idu}
          method: patch
          cors: true
          authorizer: aws_iam
  deletevillageuser:
    handler: handlers/villageuser.deleteVillageUser
    events:
      - http:
          path: village-users/{idv}/{idu}
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}